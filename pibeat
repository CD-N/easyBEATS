#!/bin/bash
# Special thanks to Elasticlce.net ref: https://www.elasticice.net/?p=92
# Special thanks to davemoore ref: https://discuss.elastic.co/t/file-packet-metric-beat-on-raspi-centos-7-armhf-armv7l/184048

# Script variables
BEAT_VERSION="5b046c5"
log=/home/pi/pibeat_log.txt

echo "---------------------------------------------------------------"
echo "System Update... " | tee -a $log 
date | tee -a $log
echo ""
echo ""
sudo DEBIAN_FRONTEND=noninteractive apt-get -yq update > /dev/null
sudo DEBIAN_FRONTEND=noninteractive apt-get -yq upgrade > /dev/null
echo " -> System Update Complete" | tee -a $log 
echo ""
echo ""
# Note: $HOME should be set to root directory of user account logged in.  
# Example: $HOME should be /home/pi if logged as default pi user account on Raspberry Pi.
# It is important to run commands as user only. Avoid using sudo or su
echo "Creating Go Workspace directories..." | tee -a $log
if [ -d $HOME/go ];
then
   echo " -> $HOME/go already exists" | tee -a $log
else
   echo " -> making $HOME/go"  | tee -a $log
   mkdir $HOME/go;  
   mkdir $HOME/go/bin;
   mkdir $HOME/go/pkg;
   mkdir $HOME/go/src;
   mkdir $HOME/go/src/github.com;
   mkdir $HOME/go/src/github.com/elastic;
   mkdir $HOME/beats;
fi
echo " -> Directories created" | tee -a $log
echo ""
echo ""
echo "Checking for python-pip git" | tee -a $log
if [ $(dpkg-query -W -f='${Status}' python-pip git 2>/dev/null | grep -c "ok installed") -eq 0 ];
then
  echo " -> Installing python-pip git..." | tee -a $log
  apt-get install python-pip git -y;
elif [ $(dpkg-query -W -f='${Status}' python-pip git 2>/dev/null | grep -c "ok installed") -eq 1 ];
then  
  echo " -> python-pip git is installed" | tee -a $log
fi 
echo ""
echo ""
echo "Checking for virtualenv..." | tee -a $log
if python -c 'import pkgutil; exit(not pkgutil.find_loader("virtualenv"))';
then
  echo " -> virtualenv is installed" | tee -a $log
else
  echo " -> virtualenv not installed" | tee -a $log
  echo " -> Installing virtualenv" | tee -a $log
  pip install virtualenv 2>&1 | tee -a $log
fi
echo ""
echo ""
echo "Checking for Make" | tee -a $log
if [ $(dpkg-query -W -f='${Status}' make 2>/dev/null | grep -c "ok installed") -eq 0 ];
then
  echo " -> Installing make..." | tee -a $log
  apt-get install make -y;
elif [ $(dpkg-query -W -f='${Status}' make 2>/dev/null | grep -c "ok installed") -eq 1 ];
then  
  echo " -> Make is installed" | tee -a $log
fi 
echo ""
echo ""
echo "Checking for GCC" | tee -a $log
if [ $(dpkg-query -W -f='${Status}' gcc 2>/dev/null | grep -c "ok installed") -eq 0 ];
then
  echo " -> Installing GCC..." | tee -a $log
  apt-get install python-pip git -y;
elif [ $(dpkg-query -W -f='${Status}' gcc 2>/dev/null | grep -c "ok installed") -eq 1 ];
then  
  echo " -> GCC is installed" | tee -a $log
fi 
echo ""
echo ""
echo "Checking for Go" | tee -a $log
if [ $(dpkg-query -W -f='${Status}' golang-go 2>/dev/null | grep -c "ok installed") -eq 0 ];
then
  echo " -> Installing Go..." | tee -a $log
  sudo apt-get install golang-go -y;
  go version  | tee -a $log
  echo "GOPATH set to:" | tee -a $log
  go env GOPATH | tee -a $log
  echo "GOROOT set to:" | tee -a $log
  go env GOROOT | tee -a $log
  echo " -> Go is installed"
elif [ $(dpkg-query -W -f='${Status}' golang-go 2>/dev/null | grep -c "ok installed") -eq 1 ];
then  
  echo " -> Go is installed" | tee -a $log
fi
echo ""
echo ""
#--------------------------------------------------------------------------------------------------------------------
# Note: This section seems to be problematic. I left $GOPATH and $GOROOT as defaults and did not to use them at all. 
#       Customize for your specific variables below. Be sure to edit lines and substitute $HOME/go with $GOPATH.

# echo "Export new environment variables" | tee -a $log
# export GOPATH=$HOME/go
# echo "Persist the new environment variables" | tee -a $log
# echo -e "export GOPATH=$HOME/go/src" | tee -a ~/.profile
#--------------------------------------------------------------------------------------------------------------------
echo "Getting Beats files from Elastic repo on github..." | tee -a $log
cd $HOME/go/src/github.com/elastic
go get github.com/elastic/beats | tee -a $log 
cd beats
echo ""
echo ""
echo "Checking out Beats" | tee -a $log
git fetch
git checkout $BEAT_VERSION | tee -a $log
echo ""
echo ""
echo "Temporarily enabling swap space." | tee -a $log
sudo fallocate -l 2G /swapfile
sudo chmod 600 /swapfile
sudo mkswap /swapfile
sudo swapon /swapfile
# echo -e "/swapfile swap swap defaults 0 0" | sudo tee -a /etc/fstab
sudo swapon --show
echo ""
echo ""
# Filebeat Creation
cd $HOME/go/src/github.com/elastic/beats/filebeat
if [ $(lscpu | grep -c "armv7") -eq 1 ];
then
  echo "Creating Filebeat..."
  GOOS=linux GOARCH=arm go get;
  make;
  echo "Filebeat created"
elif [ $(lscpu | grep -c "armv8") -eq 1 ];
then 
  echo "Creating Filebeat"
  GOOS=linux GOARCH=arm64 go get;
  make;
  echo "Filebeat created" 
fi
echo "Moving Filebeat into /home/beats/filebeat..." | tee -a $log
cp -R $HOME/go/src/github.com/elastic/beats/filebeat ~/beats/filebeat 2>&1 | tee -a $log
cp $HOME/go/bin/filebeat ~/beats/filebeat 2>&1 | tee -a $log
chmod go-w $HOME/beats/filebeat/filebeat.yml
chmod go-w -R $HOME/beats/filebeat/modules.d
echo ""
echo ""
# Metricbeat Creation
cd $HOME/go/src/github.com/elastic/beats/metricbeat
if [ $(lscpu | grep -c "armv7") -eq 1 ];
then
  echo "Creating Metricbeat..."
  GOOS=linux GOARCH=arm go get;
  make;
  echo "Metricbeat created"
elif [ $(lscpu | grep -c "armv8") -eq 1 ];
then 
  echo "Creating Metricbeat"
  GOOS=linux GOARCH=arm64 go get;
  make;
  echo "Metricbeat created" 
fi
echo "Moving Metricbeat into /home/beats/metricbeat..." | tee -a $log
cp -R $HOME/go/src/github.com/elastic/beats/metricbeat ~/beats/metricbeat 2>&1 | tee -a $log
cp $HOME/go/bin/metricbeat ~/beats/metricbeat 2>&1 | tee -a $log
chmod go-w $HOME/beats/metricbeat/metricbeat.yml
chmod go-w -R $HOME/beats/metricbeat/modules.d
echo ""
echo ""
# Auditbeat Creation
cd $HOME/go/src/github.com/elastic/beats/auditbeat
if [ $(lscpu | grep -c "armv7") -eq 1 ];
then
  echo "Creating Auditbeat..."
  GOOS=linux GOARCH=arm go get;
  make;
  echo "Auditbeat created"
elif [ $(lscpu | grep -c "armv8") -eq 1 ];
then 
  echo "Creating Auditbeat"
  GOOS=linux GOARCH=arm64 go get;
  make;
  echo "Auditbeat created" 
fi
echo "Moving Auditbeat into /home/beats/auditbeat..." | tee -a $log
cp -R $HOME/go/src/github.com/elastic/beats/auditbeat ~/beats/auditbeat
cp $HOME/go/bin/auditbeat ~/beats/auditbeat
chmod go-w $HOME/beats/auditbeat/auditbeat.yml
echo ""
echo ""
# Heartbeat Creation
cd $HOME/go/src/github.com/elastic/beats/heartbeat
if [ $(lscpu | grep -c "armv7") -eq 1 ];
then
  echo "Creating Heartbeat..."
  GOOS=linux GOARCH=arm go get;
  make;
  echo "Heartbeat created"
elif [ $(lscpu | grep -c "armv8") -eq 1 ];
then 
  echo "Creating Heartbeat"
  GOOS=linux GOARCH=arm64 go get;
  make;
  echo "Heartbeat created" 
fi
echo "Moving Heartbeat into /home/beats/heartbeat..." | tee -a $log
cp -R $HOME/go/src/github.com/elastic/beats/heartbeat ~/beats/heartbeat 2>&1 | tee -a $log
cp $HOME/go/bin/heartbeat ~/beats/heartbeat 2>&1 | tee -a $log
chmod go-w $HOME/beats/heartbeat/heartbeat.yml
chmod go-w -R $HOME/beats/heartbeat/monitors.d
echo ""
echo ""
sudo swapoff -v /swapfile
# echo -e "/swapfile swap swap defaults 0 0" | sudo tee -a /etc/fstab
sudo rm /swapfile
echo "Temporarily swap space disabled." | tee -a $log
echo ""
echo ""
echo "Cleaning up..."
rm -rf $HOME/go/src/github.com/elastic/beats/*
rm -rf $HOME/go/bin/*
echo ""
echo "pibeat finished" | tee -a $log
echo ""
echo "---------------------------------------------------------------"
echo ""
echo "Next: "
echo "      Beats files are located in /home/pi/beats"
echo "      - Configure each one that you want to use"
echo "      - Setup Index Templates"
echo "      - Run Beats"
echo "      - Start Beats on boot"