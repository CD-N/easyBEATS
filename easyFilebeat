#!/bin/bash

# Script variables
BEAT_VERSION="5b046c5"
log=/home/pi/pibeat_log.txt

echo "---------------------------------------------------------------"
echo "System Update... " | tee -a $log 
date | tee -a $log
sudo DEBIAN_FRONTEND=noninteractive apt-get -yq update > /dev/null
sudo DEBIAN_FRONTEND=noninteractive apt-get -yq upgrade > /dev/null
echo " -> System Update Complete" | tee -a $log 

# Note: $HOME should be set to root directory of user account logged in.  
# Example: $HOME should be /home/pi if logged as default pi user account on Raspberry Pi.
# It is important to run commands as user only. Avoid using sudo or su
echo "Creating Go Workspace directories..." | tee -a $log
if [ -d $HOME/go ];
then
   echo " -> $HOME/go already exists" | tee -a $log
else
   echo " -> making $HOME/go..."  | tee -a $log
   mkdir $HOME/go;  
   mkdir $HOME/go/bin;
   mkdir $HOME/go/pkg;
   mkdir $HOME/go/src;
   mkdir $HOME/go/src/github.com;
   mkdir $HOME/go/src/github.com/elastic;
fi
echo " -> Go Workspace directories created" | tee -a $log

echo "Checking for python-pip git..." | tee -a $log
if [ $(dpkg-query -W -f='${Status}' python-pip git 2>/dev/null | grep -c "ok installed") -eq 0 ];
then
  echo " -> Installing python-pip git..." | tee -a $log
  apt-get install python-pip git -y;
elif [ $(dpkg-query -W -f='${Status}' python-pip git 2>/dev/null | grep -c "ok installed") -eq 1 ];
then  
  echo " -> python-pip git is installed" | tee -a $log
fi 

echo "Checking for virtualenv..." | tee -a $log
if python -c 'import pkgutil; exit(not pkgutil.find_loader("virtualenv"))';
then
  echo " -> virtualenv is installed" | tee -a $log
else
  echo " -> Installing virtualenv..." | tee -a $log
  pip install virtualenv
fi

echo "Checking for Make..." | tee -a $log
if [ $(dpkg-query -W -f='${Status}' make 2>/dev/null | grep -c "ok installed") -eq 0 ];
then
  echo " -> Installing make..." | tee -a $log
  apt-get install make -y;
elif [ $(dpkg-query -W -f='${Status}' make 2>/dev/null | grep -c "ok installed") -eq 1 ];
then  
  echo " -> Make is installed" | tee -a $log
fi 

echo "Checking for GCC..." | tee -a $log
if [ $(dpkg-query -W -f='${Status}' gcc 2>/dev/null | grep -c "ok installed") -eq 0 ];
then
  echo " -> Installing GCC..." | tee -a $log
  apt-get install python-pip git -y;
elif [ $(dpkg-query -W -f='${Status}' gcc 2>/dev/null | grep -c "ok installed") -eq 1 ];
then  
  echo " -> GCC is installed" | tee -a $log
fi 

echo "Checking for Go..." | tee -a $log
if [ $(dpkg-query -W -f='${Status}' golang-go 2>/dev/null | grep -c "ok installed") -eq 0 ];
then
  echo " -> Installing Go..." | tee -a $log
  sudo apt-get install golang-go -y;
  go version  | tee -a $log
  echo " -> Go is installed"
elif [ $(dpkg-query -W -f='${Status}' golang-go 2>/dev/null | grep -c "ok installed") -eq 1 ];
then  
  echo " -> Go is installed" | tee -a $log
fi

#--------------------------------------------------------------------------------------------------------------------
# Note: This section seems to be problematic. I left $GOPATH and $GOROOT as defaults and did not to use them at all. 
#       Customize for your specific variables below. Be sure to edit lines and substitute $HOME/go with $GOPATH.

# echo "Export new environment variables" | tee -a $log
# export GOPATH=$HOME/go
# echo "Persist the new environment variables" | tee -a $log
# echo -e "export GOPATH=$HOME/go/src" | tee -a ~/.profile
#--------------------------------------------------------------------------------------------------------------------
echo "Getting Beats files from Elastic repo on github..." | tee -a $log
cd $HOME/go/src/github.com/elastic
go get github.com/elastic/beats | tee -a $log 
cd beats

echo "Checking out Beats..." | tee -a $log
git fetch
git checkout $BEAT_VERSION | tee -a $log

echo "Temporarily enabling swap space" | tee -a $log
sudo fallocate -l 2G /swapfile
sudo chmod 600 /swapfile
sudo mkswap /swapfile
sudo swapon /swapfile
# echo -e "/swapfile swap swap defaults 0 0" | sudo tee -a /etc/fstab
sudo swapon --show

# Filebeat Creation
cd $HOME/go/src/github.com/elastic/beats/filebeat
if [ $(lscpu | grep -c "armv7") -eq 1 ];
then
  echo "Creating Filebeat..."  | tee -a $log
  GOOS=linux GOARCH=arm go get;
  make;
  echo "Filebeat created"  | tee -a $log
elif [ $(lscpu | grep -c "armv8") -eq 1 ];
then 
  echo "Creating Filebeat..."  | tee -a $log
  GOOS=linux GOARCH=arm64 go get;
  make;
  echo "Filebeat created"  | tee -a $log
fi
# Create Working Filebeat directories
echo "Creating Filebeat directories..." | tee -a $log
# Home of Filebeat Installation and the binary files
if [ -d /usr/share/filebeat ];
then
   echo " -> /usr/share/filebeat already exists" | tee -a $log
else
   echo " -> making /usr/share/filebeat..." | tee -a $log
   sudo mkdir /usr/share/filebeat;
   sudo mkdir /usr/share/filebeat/bin;
   sudo mkdir /usr/share/filebeat/kibana;
   sudo mkdir /usr/share/filebeat/kibana/7;
   sudo mkdir /usr/share/filebeat/kibana/7/dashboard;
fi
# Home of the Configuration files
if [ -d /etc/filebeat ];
then
   echo " -> /etc/filebeat already exists" | tee -a $log
else
   echo " -> making /etc/filebeat..." | tee -a $log
   sudo mkdir /etc/filebeat;
fi
# Home of the Log files
if [ -d /var/log/filebeat ];
then
   echo " -> /var/log/filebeat already exists" | tee -a $log
else
   echo " -> making /var/log/filebeat..."  | tee -a $log
   sudo mkdir /var/log/filebeat;
fi
# Home of the persistent data files
if [ -d /var/lib/filebeat ];
then
   echo " -> /var/lib/filebeat already exists" | tee -a $log
else
   echo " -> making /var/lib/filebeat..."  | tee -a $log
   sudo mkdir /var/lib/filebeat
fi

# echo "Moving Filebeat..." | tee -a $log
sudo mv $HOME/go/src/github.com/elastic/beats/filebeat/filebeat /usr/share/filebeat/bin
sudo mv $HOME/go/src/github.com/elastic/beats/filebeat/module /usr/share/filebeat
sudo mv $HOME/go/src/github.com/elastic/beats/filebeat/modules.d/ /etc/filebeat/
sudo cp $HOME/go/src/github.com/elastic/beats/filebeat/filebeat.yml /etc/filebeat
sudo chmod 750 /var/log/filebeat
sudo chmod 750 /etc/filebeat/
sudo chown -R root:root /usr/share/filebeat/*
sudo swapoff -v /swapfile
# echo -e "/swapfile swap swap defaults 0 0" | sudo tee -a /etc/fstab
sudo rm /swapfile
echo "Temporarily swap space disabled" | tee -a $log
# Create Filebeat Service
sudo touch /lib/systemd/system/filebeat.service
echo "Description=Filebeat sends log files to Logstash or directly to Elasticsearch." >>/lib/sy$
echo "Documentation=https://www.elastic.co/products/beats/filebeat" >>/lib/systemd/system/fileb$
echo "Wants=network-online.target" >>/lib/systemd/system/filebeat.service
echo "After=network-online.target" >>/lib/systemd/system/filebeat.service
echo "" >>/lib/systemd/system/filebeat.service
echo "[Service]" >>/lib/systemd/system/filebeat.service
echo "" >>/lib/systemd/system/filebeat.service
echo 'Environment="BEAT_LOG_OPTS=-e"' >>/lib/systemd/system/filebeat.service
echo 'Environment="BEAT_CONFIG_OPTS=-c /etc/filebeat/filebeat.yml"' >>/lib/systemd/system/fileb$
echo 'Environment="BEAT_PATH_OPTS=-path.home /usr/share/filebeat -path.config /etc/fi$' >>/lib/$
echo 'ExecStart=/usr/share/filebeat/bin/filebeat $BEAT_LOG_OPTS $BEAT_CONFIG_OPTS $BE$' >>/lib/$
echo "Restart=always" >>/lib/systemd/system/filebeat.service
echo "" >>/lib/systemd/system/filebeat.service
echo "[Install]" >>/lib/systemd/system/filebeat.service
echo "WantedBy=multi-user.target" >>/lib/systemd/system/filebeat.service
# echo "Cleaning up..."
# rm -rf $HOME/go/src/github.com/elastic/beats/*
# rm -rf $HOME/go/bin/*
echo "pibeat finished" | tee -a $log
echo "---------------------------------------------------------------"
